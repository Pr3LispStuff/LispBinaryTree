

(setf biba ‘(8 (4 (2 (1) (3)) (6 (5) (7))) (12 (10 (9) (11)) (14 (13) (15)))))


(defun insertNode (Tree Val)
  (cond ((null Tree) (list Val nil nil))
        ((eql Val (car Tree)) (print "already exist") (car Tree))

        ((< Val (car Tree)) (append (list (car Tree)) (list (insertNode (cadr Tree) Val)) (list (caddr Tree))))
        (t (append (list (car Tree)) (list (cadr Tree)) (list (insertNode (caddr Tree) Val))))
  )
 )

;insert ne file und geht durch die chars ud macht nach jedem char einen Zeileumbruch
;dieser werden dann in tree, durch insert gespeichert. Dies ausgabe Zeigt nil für leere Referenz.
(defun insert (tree filename)
* (with-open-file (stream filename)
    (do ((char (read stream nil)
               (read stream nil)))
        ((null char))
      (append tree (list (insertNode tree char)))))
      (print tree)
)


;Hilfsfunktion die als erstes aufgerufen wird. Diese geht auf die Containes und gibt bei Containes == true den bearbeitetetn Baum zurück
;der in removeN aufgerufen wird
(defun removeN (Tree val)
  (cond
        ((equal 0 (containes Tree val)) Tree)
        (t (removeNode Tree val)
            )
      )
  )

  (defun removeNode (Tree val)
       (cond
              ;wenn Baum leer ist wird die Rekursion unterbrochen
             ((null Tree) nil)
             ;wenn im Knoten und gesuchter Wert übereinstimmen. Ist bis dahin schon durch den Baum gegangen und hat die Position des Löschvorgangs gefunden
             ((eql val (car Tree)) (cond
                                          ;
                                         ((and (null (cadr Tree)) (null (caddr Tree))) '())
                                         ((and (equal nil (cadr Tree)) (listp (caddr Tree))) (caddr Tree) (print "A"))
                                         ((and (listp (cadr Tree)) (equal nil (caddr Tree))) (cadr Tree) (print "B"))
                                         (t (append (getMin (caddr Tree)) (list (cadr Tree)) (append (list (removeNode (caddr Tree) (car (getMin (caddr Tree))))))))
                                   )
           )
             ;liste wird erstellt
             ((> val (car Tree)) (append (list (car Tree)) (list (cadr Tree)) (list (removeNode (caddr Tree) val))))
             ;linker Teilbaum
             ((< val (car Tree)) (append (list (car Tree)) (list (removeNode (cadr Tree) val)) (list (caddr Tree))))
         )
       )



;T bei true wird zurückgegeben
;0 bei false wenn nicht vorhanden
(defun containes (tree val)
  (cond
    ((null tree)  0)
    ((eql (car tree) val) t)
    (t  (cond
              ((listp (car tree)) (containes (append (car tree) (cdr tree)) val))
              ((containes (cdr tree) val))
        )
     )
   )
 )

  (defun size (tree)
    (cond
      ((null tree)  0)
      (t (+ (cond
              ((listp (car tree)) (size (append (car tree) (cdr tree))))
              ((+ 1 (size (cdr tree))))
             )
          )
       )
     )
    )

    (defun height (tree)
      (cond
        ((atom tree) 0)
        ((null tree) 0)
        (t
          (+ 1 (max (height (cadr tree)) (height (caddr tree))))
        )
       )
      )

    (defun getMax (Tree)
      (cond
        ((equal nil (caddr Tree)) Tree)
        (t (getMax (caddr Tree)))
      )
    )

    (defun getMin (Tree)
      (cond
        ((equal nil (cadr Tree)) Tree)
        (t (getMin (cadr Tree)))
      )
    )

    (defun isEmpty (tree)
      (cond ((null tree) T)
        (t nil)
      )
     )


    (defun levelOrder (tree)
        (loop while (not (null tree))
          do
          (setq node (car tree) tree (cdr tree))
          (if (not (null (car node)))(print (car node)))
          (setq tree (append tree (cdr node)))
        )
    )


  (defun addAll (tree otherTree)
      (print tree)
      (print otherTree)
      (cond ((null otherTree) tree)
            ((listp (car otherTree)) (append (addAll tree (car otherTree)))
            (t (append (list  (insert tree (car otherTree)))
                              (addAll tree (cdr otherTree))
               )
            )
      )
  )

  (defun menue ()

    (print "bitte wählen Sie eine Funktion aus")
    (print "Funktionsname INSERT; Parameter TREE und VAL :: Auswahl 1")
    (print "Funktionsname INSERTFILE; Parameter TREE und VAL :: Auswahl 2")
    (print "Funktionsname CONTAINES; Parameter TREE und VAL :: Auswahl 3")
    (print "Funktionsname SIZE; Parameter TREE :: Auswahl 4")
    (print "Funktionsname HEIGHT; Parameter TREE :: Auswahl 5")
    (print "Funktionsname GETMAX; Parameter TREE :: Auswahl 6")
    (print "Funktionsname GETMIN; Parameter TREE :: Auswahl 7")
    (print "Funktionsname REMOVE; Parameter TREE und VAL :: Auswahl 8")
    (print "Funktionsname ISEMPTY; Parameter TREE :: Auswahl 9")
    (print "Funktionsname ADDALL; Parameter TREE und OTHERTREE :: Auswahl 10")
    (print "Funktionsname PRINTLEVELORDER; Parameter TREE :: Auswahl 11")
    (print "Wählen Sie bitte eine Funktion aus")
    (setq auswahl (list (read)))





    (cond
          ((equal nil (car auswahl)) (print "bitte einen Baum eingeben") (menue))
          ((eql 1 (car auswahl))
            (print "bitte geben Sie einen Baum ein")
            (setq tree (read))
            (print "bitte geben Sie einen VAL ein")
            (setq val (read))
            (insertNode tree val))
            (print tree)
          ((eql 2 (car auswahl))
            (print "bitte geben Sie einen Baum ein")
            (setq tree (read))
            (print "bitte geben Sie einen Pfad zu Ihrer Datei ein")
            (setq filename (read))
            (insert tree filename))
          ((eql 3 (car auswahl))
            (print "bitte geben Sie einen Baum ein")
            (setq tree (read))
            (print "bitte geben Sie einen VAL ein")
            (setq val (read))
            (containes tree val))
          ((eql 4 (car auswahl))
            (print "bitte geben Sie einen Baum ein")
            (setq tree (read))
            (size tree))
          ((eql 5 (car auswahl))
            (print "bitte geben Sie einen Baum ein")
            (setq tree (read))
            (height tree))
          ((eql 6 (car auswahl))
            (print "bitte geben Sie einen Baum ein")
            (setq tree (read))+
            (getMax tree))
          ((eql 7 (car auswahl))
            (print "bitte geben Sie einen Baum ein")
            (setq tree (read))
            (getMin tree))
          ((eql 8 (car auswahl))
            (print "bitte geben Sie einen Baum ein")
            (setq tree (read))
            (print "bitte geben Sie einen VAL ein")
            (setq val (read))
            (remove tree val))
          ((eql 9 (car auswahl))
            (print "bitte geben Sie einen Baum ein")
            (setq tree (read))
            (print "bitte geben Sie einen VAL ein")
            (setq val (read))
            (isEmpty tree))
          ((eql 10 (car auswahl))
            (print "bitte geben Sie einen Baum ein")
            (setq tree (read))
            (print "bitte geben Sie einen weiter Baum ein")
            (setq otherTree (read))
            (addAll tree otherTree))
          ((eql 11 (car auswahl))
            (print "bitte geben Sie einen Baum ein")
            (setq tree (read))
            (levelOrder tree))
    )
    (print "Programm schließen :: 1")
    (print "Weitere Funktion aufrufen :: 2")
    (print "Auswahl bitte: ")
    (setq neueAuswahl (list (read)))
      (cond ((eql 1 (car neueAuswahl)) (print "SCHLIEßEN"))
            ((eql 2 (car neueAuswahl)) (menue))

      )
  )
